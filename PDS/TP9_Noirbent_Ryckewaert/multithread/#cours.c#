void * myThread(void *arg){
  int myarg=*((int) arg);
  int result;

  return &resultat;
}

struct param{
  int a;
  char string[20];
  int b;
  int res_x;
  int res_y;
}; 

void * mythread(void *arg){
  struct param *argp=(struct param*)arg;
  // argp->a;
  return;
}

int count_me(int i){
  static int count=0;
  count+=i,;
  return count;
}

/* ************/
struct param{
  int *tab;
  int taille;
  int (*pred)(int);
  int pas;
}

int main(){
  int tableau[taille];
  struct param p;
  p.tab=tableau;
  p.taille=taille/2;
  p.pred=pred;
  pthread_t tid;
  pthread_create(&tid,NULL,pt_search,&p);
  int posz=search(tableau+(taille/2),taille/2,pred);
  pthread_join(tid,NULL);
  //Integration(REDUCE);
}
void *pt_search(void *arg){
  struct param *pt=(struct param*)arg;
  pt->pos=search(pt->tab,pt->taille,pt->pred);
  return;
}

SEARCH
if (taille < MIN)
  //cherche direct avec une boucle
 else{
   //apelle pthread_create
   //apelle search
   // apelle join
   //produce resultat
 }










pthread_t tid;
int param=5;
int ret=pthread_create(&tid,NULL,myThread,&param);

int *adresse;
int status=pthread_join(tid,&adresse);
printf("Le rÃ©sultat est %d\n",*adresse);
