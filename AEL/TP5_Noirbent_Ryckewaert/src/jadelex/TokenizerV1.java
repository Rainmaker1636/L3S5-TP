/* The following code was generated by JFlex 1.6.1 */

package jadelex ;

import jade.Direction;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>src/jadelex/jade.lex</tt>
 */
public class TokenizerV1 implements Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENTAIRE = 2;
  public static final int COMMENTAIRE_MULTI = 4;
  public static final int JUMPX = 6;
  public static final int JUMPY = 8;
  public static final int TIMES = 10;
  public static final int STEP = 12;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6, 6
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\1\1\43\3\1\22\0\1\1\11\0\1\41\2\0\1\44"+
    "\1\0\1\40\12\42\7\0\1\17\1\16\1\0\1\27\1\7\1\46"+
    "\2\0\1\20\2\0\1\6\1\0\1\25\1\26\1\37\1\0\1\11"+
    "\1\21\1\33\1\31\1\10\1\35\11\0\1\13\1\12\1\0\1\24"+
    "\1\3\1\45\2\0\1\14\2\0\1\2\1\0\1\22\1\23\1\36"+
    "\1\0\1\5\1\15\1\32\1\30\1\4\1\34\15\0\1\1\32\0"+
    "\1\1\u15df\0\1\1\u097f\0\13\1\35\0\2\1\5\0\1\1\57\0"+
    "\1\1\u0fa0\0\1\1\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\7\0\1\1\1\2\20\1\1\0\1\3\1\1\1\2"+
    "\20\1\1\0\1\1\1\2\20\1\1\0\1\1\1\2"+
    "\1\4\1\1\1\5\1\1\1\2\2\1\1\6\20\1"+
    "\1\7\1\10\1\0\1\11\20\1\1\7\1\10\2\0"+
    "\20\1\1\7\1\10\1\12\1\1\3\0\3\1\1\13"+
    "\3\1\1\14\2\1\1\14\4\1\1\15\1\1\1\13"+
    "\3\1\1\14\2\1\1\14\4\1\1\15\1\0\1\1"+
    "\1\13\3\1\1\14\2\1\1\14\4\1\1\15\1\1"+
    "\2\0\6\1\1\16\1\17\2\1\1\20\1\1\1\20"+
    "\5\1\1\16\1\17\2\1\1\20\1\1\1\20\1\1"+
    "\1\0\4\1\1\16\1\17\2\1\1\20\1\1\1\20"+
    "\1\1\1\12\2\0\1\21\1\22\1\1\1\23\1\1"+
    "\1\24\1\25\1\26\1\22\1\1\1\23\1\1\1\24"+
    "\1\25\1\26\1\22\1\1\1\23\1\1\1\24\1\25"+
    "\1\26\1\21\6\1\3\27";

  private static int [] zzUnpackAction() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\303\0\352\0\u0111"+
    "\0\u0138\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249"+
    "\0\u0270\0\u0297\0\u02be\0\u02e5\0\u030c\0\u0333\0\u035a\0\u0381"+
    "\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u046b\0\u0492\0\u04b9"+
    "\0\u04e0\0\u0507\0\u052e\0\u0555\0\u057c\0\u05a3\0\u05ca\0\u05f1"+
    "\0\u0618\0\u063f\0\u0666\0\u068d\0\u06b4\0\u06db\0\u0702\0\u0729"+
    "\0\u0750\0\u0777\0\u079e\0\u07c5\0\u07ec\0\u0813\0\u083a\0\u0861"+
    "\0\u0888\0\u08af\0\u08d6\0\u08fd\0\u0924\0\u094b\0\u0972\0\u0999"+
    "\0\u09c0\0\u09e7\0\u0a0e\0\u0a35\0\u0a35\0\u0a5c\0\u0a5c\0\u0a83"+
    "\0\u0aaa\0\u0ad1\0\u0af8\0\u0b1f\0\u0b46\0\u0b6d\0\u0b94\0\u0bbb"+
    "\0\u0be2\0\u0c09\0\u0c30\0\u0c57\0\u0c7e\0\u0ca5\0\u0ccc\0\u0cf3"+
    "\0\u0d1a\0\u0d41\0\u0d68\0\u0138\0\u0138\0\u0444\0\u0138\0\u0d8f"+
    "\0\u0db6\0\u0ddd\0\u0e04\0\u0e2b\0\u0e52\0\u0e79\0\u0ea0\0\u0ec7"+
    "\0\u0eee\0\u0f15\0\u0f3c\0\u0f63\0\u0f8a\0\u0fb1\0\u0fd8\0\u0444"+
    "\0\u0444\0\u0729\0\u0fff\0\u1026\0\u104d\0\u1074\0\u109b\0\u10c2"+
    "\0\u10e9\0\u1110\0\u1137\0\u115e\0\u1185\0\u11ac\0\u11d3\0\u11fa"+
    "\0\u1221\0\u1248\0\u126f\0\u0729\0\u0fff\0\u0138\0\u1296\0\u0a83"+
    "\0\u12bd\0\u12e4\0\u130b\0\u1332\0\u1359\0\u0111\0\u1380\0\u13a7"+
    "\0\u13ce\0\u13f5\0\u141c\0\u1443\0\u146a\0\u1491\0\u14b8\0\u14df"+
    "\0\u1506\0\u0111\0\u152d\0\u041d\0\u1554\0\u157b\0\u15a2\0\u15c9"+
    "\0\u15f0\0\u1617\0\u163e\0\u1665\0\u168c\0\u16b3\0\u16da\0\u041d"+
    "\0\u1701\0\u1728\0\u0702\0\u174f\0\u1776\0\u179d\0\u17c4\0\u17eb"+
    "\0\u1812\0\u1839\0\u1860\0\u1887\0\u18ae\0\u18d5\0\u0702\0\u18fc"+
    "\0\u1923\0\u194a\0\u1971\0\u1998\0\u19bf\0\u19e6\0\u1a0d\0\u1a34"+
    "\0\u0111\0\u0111\0\u1a5b\0\u1a82\0\u1aa9\0\u1ad0\0\u1af7\0\u1b1e"+
    "\0\u1b45\0\u1b6c\0\u1b93\0\u1bba\0\u041d\0\u041d\0\u1be1\0\u1c08"+
    "\0\u1c2f\0\u1c56\0\u1c7d\0\u1ca4\0\u1ccb\0\u1cf2\0\u1d19\0\u1d40"+
    "\0\u1d67\0\u0702\0\u0702\0\u1d8e\0\u1db5\0\u1ddc\0\u1e03\0\u1e2a"+
    "\0\u1e51\0\u0729\0\u1e78\0\u1e9f\0\u0111\0\u0111\0\u1ec6\0\u0111"+
    "\0\u1eed\0\u0111\0\u0111\0\u0111\0\u041d\0\u1f14\0\u041d\0\u1f3b"+
    "\0\u041d\0\u041d\0\u041d\0\u0702\0\u1f62\0\u0702\0\u1f89\0\u0702"+
    "\0\u0702\0\u0702\0\u0138\0\u1fb0\0\u1fd7\0\u1ffe\0\u2025\0\u204c"+
    "\0\u2073\0\u0111\0\u041d\0\u0702";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\10\1\11\1\12\1\13\2\10\1\14\1\15\2\10"+
    "\1\16\1\17\1\10\1\20\1\21\1\22\1\10\1\23"+
    "\1\24\1\25\1\10\1\26\1\27\7\10\1\30\1\31"+
    "\1\32\1\10\1\33\1\11\3\10\1\34\1\35\1\36"+
    "\1\37\2\34\1\40\1\41\2\34\1\42\1\43\1\34"+
    "\1\44\1\45\1\46\1\34\1\47\1\50\1\51\1\34"+
    "\1\52\1\53\7\34\1\54\1\55\1\56\2\34\1\11"+
    "\3\34\1\57\1\60\1\61\1\62\2\57\1\63\1\64"+
    "\2\57\1\65\1\66\1\57\1\67\1\70\1\71\1\57"+
    "\1\72\1\73\1\74\1\57\1\75\1\76\7\57\1\77"+
    "\1\100\1\101\1\102\1\57\1\60\3\57\1\10\1\103"+
    "\1\12\1\13\2\10\1\14\1\15\2\10\1\16\1\17"+
    "\1\10\1\20\1\21\1\22\1\10\1\23\1\24\1\25"+
    "\1\10\1\26\1\27\7\10\1\30\1\31\1\32\1\10"+
    "\1\104\1\103\1\105\3\10\1\103\1\12\1\13\2\10"+
    "\1\14\1\15\2\10\1\16\1\17\1\10\1\20\1\21"+
    "\1\22\1\10\1\23\1\24\1\25\1\10\1\26\1\27"+
    "\7\10\1\30\1\31\1\32\1\10\1\106\1\103\1\107"+
    "\3\10\1\110\1\12\1\13\2\10\1\14\1\15\2\10"+
    "\1\16\1\17\1\10\1\20\1\21\1\22\1\10\1\23"+
    "\1\24\1\25\1\10\1\26\1\27\7\10\1\30\1\31"+
    "\1\32\2\10\1\110\1\10\1\111\1\112\1\10\1\103"+
    "\1\12\1\13\2\10\1\14\1\15\2\10\1\16\1\17"+
    "\1\10\1\20\1\21\1\22\1\10\1\23\1\24\1\25"+
    "\1\10\1\26\1\27\7\10\1\30\1\31\1\32\1\10"+
    "\1\113\1\103\4\10\1\0\36\10\1\0\2\10\1\0"+
    "\3\10\47\0\1\10\1\0\1\10\1\114\34\10\1\0"+
    "\2\10\1\0\4\10\1\0\13\10\1\115\22\10\1\0"+
    "\2\10\1\0\4\10\1\0\5\10\1\116\30\10\1\0"+
    "\2\10\1\0\4\10\1\0\17\10\1\117\16\10\1\0"+
    "\2\10\1\0\4\10\1\0\11\10\1\120\24\10\1\0"+
    "\2\10\1\0\4\10\1\0\1\121\35\10\1\0\2\10"+
    "\1\0\4\10\1\0\26\10\1\122\7\10\1\0\2\10"+
    "\1\0\4\10\1\0\15\10\1\123\20\10\1\0\2\10"+
    "\1\0\4\10\1\0\4\10\1\124\31\10\1\0\2\10"+
    "\1\0\4\10\1\0\27\10\1\125\6\10\1\0\2\10"+
    "\1\0\4\10\1\0\21\10\1\126\14\10\1\0\2\10"+
    "\1\0\4\10\1\0\26\10\1\127\7\10\1\0\2\10"+
    "\1\0\4\10\1\0\24\10\1\130\11\10\1\0\2\10"+
    "\1\0\4\10\1\0\27\10\1\131\6\10\1\0\2\10"+
    "\1\0\4\10\1\0\11\10\1\132\24\10\1\0\2\10"+
    "\1\0\4\10\1\0\15\10\1\133\20\10\1\0\2\10"+
    "\1\0\3\10\40\0\1\134\1\135\5\0\1\10\1\0"+
    "\36\10\1\0\1\10\1\33\1\0\3\10\1\34\1\136"+
    "\36\34\1\136\2\34\1\137\3\34\43\136\1\137\3\136"+
    "\1\34\1\136\1\34\1\140\34\34\1\136\2\34\1\137"+
    "\4\34\1\136\13\34\1\141\22\34\1\136\2\34\1\137"+
    "\4\34\1\136\5\34\1\142\30\34\1\136\2\34\1\137"+
    "\4\34\1\136\17\34\1\143\16\34\1\136\2\34\1\137"+
    "\4\34\1\136\11\34\1\144\24\34\1\136\2\34\1\137"+
    "\4\34\1\136\1\145\35\34\1\136\2\34\1\137\4\34"+
    "\1\136\26\34\1\146\7\34\1\136\2\34\1\137\4\34"+
    "\1\136\15\34\1\147\20\34\1\136\2\34\1\137\4\34"+
    "\1\136\4\34\1\150\31\34\1\136\2\34\1\137\4\34"+
    "\1\136\27\34\1\151\6\34\1\136\2\34\1\137\4\34"+
    "\1\136\21\34\1\152\14\34\1\136\2\34\1\137\4\34"+
    "\1\136\26\34\1\153\7\34\1\136\2\34\1\137\4\34"+
    "\1\136\24\34\1\154\11\34\1\136\2\34\1\137\4\34"+
    "\1\136\27\34\1\155\6\34\1\136\2\34\1\137\4\34"+
    "\1\136\11\34\1\156\24\34\1\136\2\34\1\137\4\34"+
    "\1\136\15\34\1\157\20\34\1\136\2\34\1\137\3\34"+
    "\40\136\1\160\1\161\1\136\1\137\3\136\1\57\1\162"+
    "\36\57\1\162\1\102\1\57\1\162\3\57\41\162\1\163"+
    "\5\162\1\57\1\162\1\57\1\164\34\57\1\162\1\102"+
    "\1\57\1\162\4\57\1\162\13\57\1\165\22\57\1\162"+
    "\1\102\1\57\1\162\4\57\1\162\5\57\1\166\30\57"+
    "\1\162\1\102\1\57\1\162\4\57\1\162\17\57\1\167"+
    "\16\57\1\162\1\102\1\57\1\162\4\57\1\162\11\57"+
    "\1\170\24\57\1\162\1\102\1\57\1\162\4\57\1\162"+
    "\1\171\35\57\1\162\1\102\1\57\1\162\4\57\1\162"+
    "\26\57\1\172\7\57\1\162\1\102\1\57\1\162\4\57"+
    "\1\162\15\57\1\173\20\57\1\162\1\102\1\57\1\162"+
    "\4\57\1\162\4\57\1\174\31\57\1\162\1\102\1\57"+
    "\1\162\4\57\1\162\27\57\1\175\6\57\1\162\1\102"+
    "\1\57\1\162\4\57\1\162\21\57\1\176\14\57\1\162"+
    "\1\102\1\57\1\162\4\57\1\162\26\57\1\177\7\57"+
    "\1\162\1\102\1\57\1\162\4\57\1\162\24\57\1\200"+
    "\11\57\1\162\1\102\1\57\1\162\4\57\1\162\27\57"+
    "\1\201\6\57\1\162\1\102\1\57\1\162\4\57\1\162"+
    "\11\57\1\202\24\57\1\162\1\102\1\57\1\162\4\57"+
    "\1\162\15\57\1\203\20\57\1\162\1\102\1\57\1\162"+
    "\3\57\40\162\1\204\1\205\5\162\1\57\1\162\36\57"+
    "\1\206\1\207\1\57\1\162\3\57\1\0\1\103\41\0"+
    "\1\103\3\0\1\10\1\0\36\10\1\0\1\10\1\104"+
    "\1\0\4\10\1\0\36\10\1\0\1\10\1\106\1\0"+
    "\3\10\1\0\1\210\41\0\1\210\1\0\1\211\1\212"+
    "\1\10\1\0\21\10\1\213\14\10\1\0\2\10\1\0"+
    "\4\10\1\0\24\10\1\214\11\10\1\0\2\10\1\0"+
    "\4\10\1\0\36\10\1\0\1\10\1\113\1\0\4\10"+
    "\1\0\2\10\1\215\33\10\1\0\2\10\1\0\4\10"+
    "\1\0\30\10\1\216\5\10\1\0\2\10\1\0\4\10"+
    "\1\0\6\10\1\217\27\10\1\0\2\10\1\0\4\10"+
    "\1\0\31\10\1\216\4\10\1\0\2\10\1\0\4\10"+
    "\1\0\12\10\1\220\23\10\1\0\2\10\1\0\4\10"+
    "\1\0\1\221\35\10\1\0\2\10\1\0\4\10\1\0"+
    "\22\10\1\222\13\10\1\0\2\10\1\0\4\10\1\0"+
    "\16\10\1\223\17\10\1\0\2\10\1\0\4\10\1\0"+
    "\4\10\1\224\31\10\1\0\2\10\1\0\4\10\1\0"+
    "\25\10\1\225\10\10\1\0\2\10\1\0\4\10\1\0"+
    "\3\10\1\226\32\10\1\0\2\10\1\0\4\10\1\0"+
    "\1\10\1\227\34\10\1\0\2\10\1\0\4\10\1\0"+
    "\7\10\1\230\26\10\1\0\2\10\1\0\4\10\1\0"+
    "\5\10\1\231\30\10\1\0\2\10\1\0\4\10\1\0"+
    "\13\10\1\232\22\10\1\0\2\10\1\0\4\10\1\0"+
    "\17\10\1\232\16\10\1\0\2\10\1\0\3\10\1\34"+
    "\1\136\2\34\1\233\33\34\1\136\2\34\1\137\4\34"+
    "\1\136\30\34\1\234\5\34\1\136\2\34\1\137\4\34"+
    "\1\136\6\34\1\235\27\34\1\136\2\34\1\137\4\34"+
    "\1\136\31\34\1\234\4\34\1\136\2\34\1\137\4\34"+
    "\1\136\12\34\1\236\23\34\1\136\2\34\1\137\4\34"+
    "\1\136\1\237\35\34\1\136\2\34\1\137\4\34\1\136"+
    "\22\34\1\240\13\34\1\136\2\34\1\137\4\34\1\136"+
    "\16\34\1\241\17\34\1\136\2\34\1\137\4\34\1\136"+
    "\4\34\1\242\31\34\1\136\2\34\1\137\4\34\1\136"+
    "\25\34\1\243\10\34\1\136\2\34\1\137\4\34\1\136"+
    "\3\34\1\244\32\34\1\136\2\34\1\137\4\34\1\136"+
    "\1\34\1\245\34\34\1\136\2\34\1\137\4\34\1\136"+
    "\7\34\1\246\26\34\1\136\2\34\1\137\4\34\1\136"+
    "\5\34\1\247\30\34\1\136\2\34\1\137\4\34\1\136"+
    "\13\34\1\250\22\34\1\136\2\34\1\137\4\34\1\136"+
    "\17\34\1\250\16\34\1\136\2\34\1\137\3\34\40\162"+
    "\1\206\1\251\5\162\1\57\1\162\2\57\1\252\33\57"+
    "\1\162\1\102\1\57\1\162\4\57\1\162\30\57\1\253"+
    "\5\57\1\162\1\102\1\57\1\162\4\57\1\162\6\57"+
    "\1\254\27\57\1\162\1\102\1\57\1\162\4\57\1\162"+
    "\31\57\1\253\4\57\1\162\1\102\1\57\1\162\4\57"+
    "\1\162\12\57\1\255\23\57\1\162\1\102\1\57\1\162"+
    "\4\57\1\162\1\256\35\57\1\162\1\102\1\57\1\162"+
    "\4\57\1\162\22\57\1\257\13\57\1\162\1\102\1\57"+
    "\1\162\4\57\1\162\16\57\1\260\17\57\1\162\1\102"+
    "\1\57\1\162\4\57\1\162\4\57\1\261\31\57\1\162"+
    "\1\102\1\57\1\162\4\57\1\162\25\57\1\262\10\57"+
    "\1\162\1\102\1\57\1\162\4\57\1\162\3\57\1\263"+
    "\32\57\1\162\1\102\1\57\1\162\4\57\1\162\1\57"+
    "\1\264\34\57\1\162\1\102\1\57\1\162\4\57\1\162"+
    "\7\57\1\265\26\57\1\162\1\102\1\57\1\162\4\57"+
    "\1\162\5\57\1\266\30\57\1\162\1\102\1\57\1\162"+
    "\4\57\1\162\13\57\1\267\22\57\1\162\1\102\1\57"+
    "\1\162\4\57\1\162\17\57\1\267\16\57\1\162\1\102"+
    "\1\57\1\162\4\57\1\162\36\57\1\162\1\270\1\57"+
    "\1\162\3\57\23\0\1\271\51\0\1\272\20\0\1\10"+
    "\1\0\12\10\1\273\23\10\1\0\2\10\1\0\4\10"+
    "\1\0\16\10\1\274\17\10\1\0\2\10\1\0\4\10"+
    "\1\0\1\10\1\275\34\10\1\0\2\10\1\0\4\10"+
    "\1\0\5\10\1\276\30\10\1\0\2\10\1\0\4\10"+
    "\1\0\13\10\1\277\22\10\1\0\2\10\1\0\4\10"+
    "\1\0\1\10\1\300\34\10\1\0\2\10\1\0\4\10"+
    "\1\0\1\10\1\301\30\10\1\302\3\10\1\0\2\10"+
    "\1\0\4\10\1\0\17\10\1\303\16\10\1\0\2\10"+
    "\1\0\4\10\1\0\5\10\1\304\30\10\1\0\2\10"+
    "\1\0\4\10\1\0\5\10\1\301\25\10\1\302\2\10"+
    "\1\0\2\10\1\0\4\10\1\0\22\10\1\305\13\10"+
    "\1\0\2\10\1\0\4\10\1\0\13\10\1\306\22\10"+
    "\1\0\2\10\1\0\4\10\1\0\25\10\1\307\10\10"+
    "\1\0\2\10\1\0\4\10\1\0\17\10\1\310\16\10"+
    "\1\0\2\10\1\0\3\10\1\34\1\136\1\34\1\311"+
    "\34\34\1\136\2\34\1\137\4\34\1\136\5\34\1\312"+
    "\30\34\1\136\2\34\1\137\4\34\1\136\13\34\1\313"+
    "\22\34\1\136\2\34\1\137\4\34\1\136\1\34\1\314"+
    "\34\34\1\136\2\34\1\137\4\34\1\136\1\34\1\315"+
    "\30\34\1\316\3\34\1\136\2\34\1\137\4\34\1\136"+
    "\17\34\1\317\16\34\1\136\2\34\1\137\4\34\1\136"+
    "\5\34\1\320\30\34\1\136\2\34\1\137\4\34\1\136"+
    "\5\34\1\315\25\34\1\316\2\34\1\136\2\34\1\137"+
    "\4\34\1\136\22\34\1\321\13\34\1\136\2\34\1\137"+
    "\4\34\1\136\13\34\1\322\22\34\1\136\2\34\1\137"+
    "\4\34\1\136\25\34\1\323\10\34\1\136\2\34\1\137"+
    "\4\34\1\136\17\34\1\324\16\34\1\136\2\34\1\137"+
    "\3\34\41\162\1\325\5\162\1\57\1\162\1\57\1\326"+
    "\34\57\1\162\1\102\1\57\1\162\4\57\1\162\5\57"+
    "\1\327\30\57\1\162\1\102\1\57\1\162\4\57\1\162"+
    "\13\57\1\330\22\57\1\162\1\102\1\57\1\162\4\57"+
    "\1\162\1\57\1\331\34\57\1\162\1\102\1\57\1\162"+
    "\4\57\1\162\1\57\1\332\30\57\1\333\3\57\1\162"+
    "\1\102\1\57\1\162\4\57\1\162\17\57\1\334\16\57"+
    "\1\162\1\102\1\57\1\162\4\57\1\162\5\57\1\335"+
    "\30\57\1\162\1\102\1\57\1\162\4\57\1\162\5\57"+
    "\1\332\25\57\1\333\2\57\1\162\1\102\1\57\1\162"+
    "\4\57\1\162\22\57\1\336\13\57\1\162\1\102\1\57"+
    "\1\162\4\57\1\162\13\57\1\337\22\57\1\162\1\102"+
    "\1\57\1\162\4\57\1\162\25\57\1\340\10\57\1\162"+
    "\1\102\1\57\1\162\4\57\1\162\17\57\1\341\16\57"+
    "\1\162\1\102\1\57\1\162\4\57\1\162\36\57\1\342"+
    "\1\270\1\57\1\162\3\57\14\0\1\343\52\0\1\344"+
    "\26\0\1\10\1\0\13\10\1\345\22\10\1\0\2\10"+
    "\1\0\4\10\1\0\17\10\1\345\16\10\1\0\2\10"+
    "\1\0\4\10\1\0\3\10\1\346\32\10\1\0\2\10"+
    "\1\0\4\10\1\0\7\10\1\346\26\10\1\0\2\10"+
    "\1\0\4\10\1\0\13\10\1\347\22\10\1\0\2\10"+
    "\1\0\4\10\1\0\3\10\1\350\32\10\1\0\2\10"+
    "\1\0\4\10\1\0\17\10\1\351\16\10\1\0\2\10"+
    "\1\0\4\10\1\0\7\10\1\350\26\10\1\0\2\10"+
    "\1\0\4\10\1\0\1\10\1\352\30\10\1\353\3\10"+
    "\1\0\2\10\1\0\4\10\1\0\30\10\1\354\5\10"+
    "\1\0\2\10\1\0\4\10\1\0\5\10\1\352\25\10"+
    "\1\353\2\10\1\0\2\10\1\0\4\10\1\0\31\10"+
    "\1\354\4\10\1\0\2\10\1\0\3\10\1\34\1\136"+
    "\3\34\1\355\32\34\1\136\2\34\1\137\4\34\1\136"+
    "\7\34\1\355\26\34\1\136\2\34\1\137\4\34\1\136"+
    "\13\34\1\356\22\34\1\136\2\34\1\137\4\34\1\136"+
    "\3\34\1\357\32\34\1\136\2\34\1\137\4\34\1\136"+
    "\17\34\1\360\16\34\1\136\2\34\1\137\4\34\1\136"+
    "\7\34\1\357\26\34\1\136\2\34\1\137\4\34\1\136"+
    "\1\34\1\361\30\34\1\362\3\34\1\136\2\34\1\137"+
    "\4\34\1\136\30\34\1\363\5\34\1\136\2\34\1\137"+
    "\4\34\1\136\5\34\1\361\25\34\1\362\2\34\1\136"+
    "\2\34\1\137\4\34\1\136\31\34\1\363\4\34\1\136"+
    "\2\34\1\137\3\34\40\162\1\342\1\325\5\162\1\57"+
    "\1\162\3\57\1\364\32\57\1\162\1\102\1\57\1\162"+
    "\4\57\1\162\7\57\1\364\26\57\1\162\1\102\1\57"+
    "\1\162\4\57\1\162\13\57\1\365\22\57\1\162\1\102"+
    "\1\57\1\162\4\57\1\162\3\57\1\366\32\57\1\162"+
    "\1\102\1\57\1\162\4\57\1\162\17\57\1\367\16\57"+
    "\1\162\1\102\1\57\1\162\4\57\1\162\7\57\1\366"+
    "\26\57\1\162\1\102\1\57\1\162\4\57\1\162\1\57"+
    "\1\370\30\57\1\371\3\57\1\162\1\102\1\57\1\162"+
    "\4\57\1\162\30\57\1\372\5\57\1\162\1\102\1\57"+
    "\1\162\4\57\1\162\5\57\1\370\25\57\1\371\2\57"+
    "\1\162\1\102\1\57\1\162\4\57\1\162\31\57\1\372"+
    "\4\57\1\162\1\102\1\57\1\162\3\57\15\0\1\373"+
    "\52\0\1\373\25\0\1\10\1\0\1\10\1\374\34\10"+
    "\1\0\2\10\1\0\4\10\1\0\5\10\1\375\30\10"+
    "\1\0\2\10\1\0\3\10\1\34\1\136\1\34\1\376"+
    "\34\34\1\136\2\34\1\137\4\34\1\136\5\34\1\377"+
    "\30\34\1\136\2\34\1\137\3\34\1\57\1\162\1\57"+
    "\1\u0100\34\57\1\162\1\102\1\57\1\162\4\57\1\162"+
    "\5\57\1\u0101\30\57\1\162\1\102\1\57\1\162\3\57"+
    "\1\10\1\0\3\10\1\u0102\32\10\1\0\2\10\1\0"+
    "\4\10\1\0\7\10\1\u0102\26\10\1\0\2\10\1\0"+
    "\3\10\1\34\1\136\3\34\1\u0103\32\34\1\136\2\34"+
    "\1\137\4\34\1\136\7\34\1\u0103\26\34\1\136\2\34"+
    "\1\137\3\34\1\57\1\162\3\57\1\u0104\32\57\1\162"+
    "\1\102\1\57\1\162\4\57\1\162\7\57\1\u0104\26\57"+
    "\1\162\1\102\1\57\1\162\3\57";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8346];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\7\0\1\1\1\11\20\1\1\0\23\1\1\0\22\1"+
    "\1\0\32\1\2\11\1\0\1\11\22\1\2\0\22\1"+
    "\1\11\1\1\3\0\36\1\1\0\17\1\2\0\32\1"+
    "\1\0\15\1\2\0\26\1\1\11\11\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[260];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
	int compteurCommentaire = 0;
	int lastInt;
	StepLength pas=new StepLength(1);		


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public TokenizerV1(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 180) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Yytoken yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { yybegin(YYINITIAL);
		return new Unknown(yytext());
            }
          case 24: break;
          case 2: 
            { 
            }
          case 25: break;
          case 3: 
            { lastInt=Integer.parseInt(yytext());
		yybegin(TIMES);
            }
          case 26: break;
          case 4: 
            { lastInt=Integer.parseInt(yytext());
		yybegin(JUMPY);
            }
          case 27: break;
          case 5: 
            { yybegin(YYINITIAL);
		return new Jump(lastInt,Integer.parseInt(yytext()));
            }
          case 28: break;
          case 6: 
            { pas=new StepLength(Integer.parseInt(yytext()));
		yybegin(YYINITIAL);
		return new StepLength(Integer.parseInt(yytext()));
            }
          case 29: break;
          case 7: 
            { compteurCommentaire++;
	yybegin(COMMENTAIRE);
            }
          case 30: break;
          case 8: 
            { compteurCommentaire++;
	yybegin(COMMENTAIRE_MULTI);
            }
          case 31: break;
          case 9: 
            { compteurCommentaire--;
		if (compteurCommentaire == 0 ){
			yybegin(YYINITIAL);
		}
            }
          case 32: break;
          case 10: 
            { compteurCommentaire--;
		if (compteurCommentaire == 0){		
			yybegin(YYINITIAL);
		}
            }
          case 33: break;
          case 11: 
            { return new Move(Direction.EAST);
            }
          case 34: break;
          case 12: 
            { return new Move(Direction.SOUTH);
            }
          case 35: break;
          case 13: 
            { yybegin(STEP);
            }
          case 36: break;
          case 14: 
            { return new Move(Direction.SOUTHE);
            }
          case 37: break;
          case 15: 
            { return new Move(Direction.SOUTHW);
            }
          case 38: break;
          case 16: 
            { return new Move(Direction.NORTH);
            }
          case 39: break;
          case 17: 
            { yybegin(YYINITIAL);
		return new Repeat(lastInt);
            }
          case 40: break;
          case 18: 
            { return new PenMode(false);
            }
          case 41: break;
          case 19: 
            { yybegin(JUMPX);
            }
          case 42: break;
          case 20: 
            { return new Move(Direction.NORTHE);
            }
          case 43: break;
          case 21: 
            { return new Move(Direction.NORTHW);
            }
          case 44: break;
          case 22: 
            { return new Move(Direction.WEST);
            }
          case 45: break;
          case 23: 
            { return new PenMode(true);
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
